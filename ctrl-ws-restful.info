<?xml version="1.0"?>
<!-- Generated by the OpenACS Package Manager -->

<package key="ctrl-ws-restful" url="http://openacs.org/repository/apm/packages/ctrl-ws" type="apm_application">
    <package-name>Generic RESTFUL WS Inerface</package-name>
    <pretty-plural>Generic RESTFUL WS Inerface</pretty-plural>
    <initial-install-p>f</initial-install-p>
    <singleton-p>f</singleton-p>
    <implements-subsite-p>f</implements-subsite-p>
    <inherit-templates-p>f</inherit-templates-p>
    
    <version name="2.0.0" url="http://openacs.org/repository/download/apm/ctrl-ws-restful-2.0.0.apm">
        <owner url="mailto:khuang@mednet.ucla.edu">Khy Huang</owner>
        <summary>Adds a RESTFUL Interfaces to procedure calls. 
</summary>
        <release-date>2022-08-29</release-date>
        <description format="text/html">Adds a RESTFUL Interfaces to procedure calls.  There is a mechanism to register the procedures to call when a RESTFUL url is referred to under package.


</description>
        <maturity>0</maturity>

        <provides url="ctrl-ws-restful" version="2.0.0"/>
        <requires url="ctrl-jwt" version="1.1.0"/>

        <callbacks>
        </callbacks>
        <parameters>
            <parameter scope="instance" datatype="string"  min_n_values="1"  max_n_values="1"  name="auth_type"  default="jwt" description="The type of authentication used in the package :
oacs_user, jwt or oauth_token (DEFAULT)"/>
            <parameter scope="instance" datatype="string"  min_n_values="1"  max_n_values="1"  name="ctrl_auth_proc"  default="ctrl::oauth::jwt_check_oacs_fields" description="The procedure takes one parameter (sub_value). The parameter is the value of &#34;sub&#34; claim (if &#34;sub&#34; is not in payload, the value of the field is &#34;&#34;) in the format &#34;${id_type}:${id}&#34;
There is a default procedure (ctrl::oauth::jwt_check_oacs_fields) that supports the fields generic to OpenACS: email, username, screen_name

The procedure in this parameter returns user_id or 0 (if there are no matching user accounts)
" section_name="JWT"/>
            <parameter scope="instance" datatype="string"  min_n_values="1"  max_n_values="1"  name="custom_auth_proc"  description="The procedure takes one parameter (jwt_payload). This is the payload in JSON format.  Returns user_id or 0 (if there are no matching user accounts)" section_name="JWT"/>
            <parameter scope="instance" datatype="number"  min_n_values="1"  max_n_values="1"  name="jwt_throttle_invalid_count"  default="10" description="Amount of times a JWT request can fail before blocking access for a period of time" section_name="JWT"/>
            <parameter scope="instance" datatype="number"  min_n_values="1"  max_n_values="1"  name="jwt_throttle_time"  default="1" description="Time in minutes the requests using JWT are blocked after a certain amount of fails" section_name="JWT"/>
            <parameter scope="instance" datatype="string"  min_n_values="1"  max_n_values="1"  name="user_account_encoding"  default="NONE" description="specifies the mapping between JWT token account information to user account in the system.  Can be NONE (Default) , CTRL, CUSTOM." section_name="JWT"/>
            <parameter scope="instance" datatype="string"  min_n_values="1"  max_n_values="1"  name="ws_dir"  description="The directory that stores the WS files. It is relative to the base path of the site .	"/>
            <parameter scope="instance" datatype="string"  min_n_values="1"  max_n_values="1"  name="ws_file"  description="The file that stores the WS files.  If ws_dir parameter is empty the file is under the directory defined in ws_dir . "/>
        </parameters>

    </version>
</package>
